id: ais_data_extraction_and_load
namespace: ais
description: |
  AIS Data Ingestion Flow
  This flow orchestrates the ETL process for AIS (Automatic Identification System) data:
  1. Downloads ZIP files containing AIS data
  2. Extracts CSV files from the ZIP archives
  3. Uploads extracted files to Google Cloud Storage (GCS)
  4. Loads data from GCS to BigQuery staging tables

variables:
  file: "aisdk-{{trigger.date | date('yyyy-MM-dd')}}"
  gcs_file: "gs://{{kv('GCP_BUCKET_NAME')}}/{{vars.file}}"
  table: "{{kv('GCP_DATASET')}}.ais_data_{{trigger.date | date('yyyy_MM_dd')}}"
  data: "{{outputs.extract.outputFiles['aisdk-' ~ (trigger.date | date('yyyy-MM-dd')) ~ '.csv']}}"
  base_url: "http://web.ais.dk/aisdata/"
  temp_dir: "{{ tempDir() }}"

tasks:
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file: "{{render(vars.file)}}"

  - id: extract
    type: io.kestra.plugin.scripts.shell.Commands
    outputFiles:
      - "*.csv"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    commands:
      - wget -q {{vars.base_url}}{{render(vars.file)}}.zip -O {{render(vars.file)}}.zip && unzip -o {{render(vars.file)}}.zip && rm {{render(vars.file)}}.zip

  - id: upload_to_gcs
    type: io.kestra.plugin.gcp.gcs.Upload
    from: "{{render(vars.data)}}"
    to: "{{render(vars.gcs_file)}}"

  - id: bq_ais_data
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.ais_data`
      (
        unique_row_id BYTES OPTIONS (description = 'Unique identifier generated by hashing key AIS attributes.'),
        filename STRING OPTIONS (description = 'The source filename from which the AIS data was loaded.'),
        Timestamp TIMESTAMP OPTIONS (description = 'Timestamp from the AIS basestation.'),
        Type_of_mobile STRING OPTIONS (description = 'Type of mobile (e.g., Class A, Class B, AtoN).'),
        MMSI STRING OPTIONS (description = 'MMSI number of vessel.'),
        Latitude FLOAT64 OPTIONS (description = 'Latitude of the message report.'),
        Longitude FLOAT64 OPTIONS (description = 'Longitude of the message report.'),
        Navigational_status STRING OPTIONS (description = 'Navigational status from the AIS message.'),
        ROT FLOAT64 OPTIONS (description = 'Rate of Turn from AIS message.'),
        SOG FLOAT64 OPTIONS (description = 'Speed over ground.'),
        COG FLOAT64 OPTIONS (description = 'Course over ground.'),
        Heading FLOAT64 OPTIONS (description = 'Heading of the vessel.'),
        IMO STRING OPTIONS (description = 'IMO number of the vessel.'),
        Callsign STRING OPTIONS (description = 'Callsign of the vessel.'),
        Name STRING OPTIONS (description = 'Name of the vessel.'),
        Ship_type STRING OPTIONS (description = 'AIS ship type of the vessel.'),
        Cargo_type STRING OPTIONS (description = 'Type of cargo reported.'),
        Width FLOAT64 OPTIONS (description = 'Width of the vessel.'),
        Length FLOAT64 OPTIONS (description = 'Length of the vessel.'),
        Type_of_position_fixing_device STRING OPTIONS (description = 'Type of positional fixing device.'),
        Draught FLOAT64 OPTIONS (description = 'Draught as reported by the AIS message.'),
        Destination STRING OPTIONS (description = 'Destination from the AIS message.'),
        ETA TIMESTAMP OPTIONS (description = 'Estimated Time of Arrival, if available.'),
        Data_source_type STRING OPTIONS (description = 'Data source type (e.g., AIS).'),
        Size_A FLOAT64 OPTIONS (description = 'Length from GPS to the bow.'),
        Size_B FLOAT64 OPTIONS (description = 'Length from GPS to the stern.'),
        Size_C FLOAT64 OPTIONS (description = 'Length from GPS to the starboard side.'),
        Size_D FLOAT64 OPTIONS (description = 'Length from GPS to the port side.')
      )
      PARTITION BY DATE(Timestamp);

  - id: bq_ais_data_ext
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`
      (
        Timestamp STRING OPTIONS (description = 'Timestamp in dd/mm/yyyy hh:mm:ss format'),
        Type_of_mobile STRING OPTIONS (description = 'Type of mobile'),
        MMSI STRING OPTIONS (description = 'MMSI number of the vessel'),
        Latitude FLOAT64 OPTIONS (description = 'Latitude'),
        Longitude FLOAT64 OPTIONS (description = 'Longitude'),
        Navigational_status STRING OPTIONS (description = 'Navigational status'),
        ROT FLOAT64 OPTIONS (description = 'Rate of Turn'),
        SOG FLOAT64 OPTIONS (description = 'Speed over ground'),
        COG FLOAT64 OPTIONS (description = 'Course over ground'),
        Heading FLOAT64 OPTIONS (description = 'Heading'),
        IMO STRING OPTIONS (description = 'IMO number'),
        Callsign STRING OPTIONS (description = 'Callsign'),
        Name STRING OPTIONS (description = 'Name of the vessel'),
        Ship_type STRING OPTIONS (description = 'Ship type'),
        Cargo_type STRING OPTIONS (description = 'Cargo type'),
        Width FLOAT64 OPTIONS (description = 'Width'),
        Length FLOAT64 OPTIONS (description = 'Length'),
        Type_of_position_fixing_device STRING OPTIONS (description = 'Positional fixing device type'),
        Draught FLOAT64 OPTIONS (description = 'Draught'),
        Destination STRING OPTIONS (description = 'Destination'),
        ETA STRING OPTIONS (description = 'Estimated Time of Arrival in dd/mm/yyyy hh:mm:ss format'),
        Data_source_type STRING OPTIONS (description = 'Data source type'),
        Size_A FLOAT64 OPTIONS (description = 'Size A'),
        Size_B FLOAT64 OPTIONS (description = 'Size B'),
        Size_C FLOAT64 OPTIONS (description = 'Size C'),
        Size_D FLOAT64 OPTIONS (description = 'Size D')
      )
      OPTIONS (
        format = 'CSV',
        uris = ['{{render(vars.gcs_file)}}'],
        skip_leading_rows = 1,
        ignore_unknown_values = TRUE
      );

  - id: bq_ais_data_tmp
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}`
      AS
      SELECT
        MD5(CONCAT(
          COALESCE(MMSI, ""),
          COALESCE(CAST(PARSE_TIMESTAMP('%d/%m/%Y %H:%M:%S', Timestamp) AS STRING), ""),
          COALESCE(CAST(Latitude AS STRING), ""),
          COALESCE(CAST(Longitude AS STRING), "")
        )) AS unique_row_id,
        "{{render(vars.file)}}" AS filename,
        PARSE_TIMESTAMP('%d/%m/%Y %H:%M:%S', Timestamp) AS Timestamp,
        Type_of_mobile,
        MMSI,
        Latitude,
        Longitude,
        Navigational_status,
        ROT,
        SOG,
        COG,
        Heading,
        IMO,
        Callsign,
        Name,
        Ship_type,
        Cargo_type,
        Width,
        Length,
        Type_of_position_fixing_device,
        Draught,
        Destination,
        CASE
          WHEN ETA != '' THEN PARSE_TIMESTAMP('%d/%m/%Y %H:%M:%S', ETA)
          ELSE NULL
        END AS ETA,
        Data_source_type,
        Size_A,
        Size_B,
        Size_C,
        Size_D
      FROM `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`;

  - id: bq_ais_data_merge
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      MERGE INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.ais_data` T
      USING `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}` S
      ON T.unique_row_id = S.unique_row_id
      WHEN NOT MATCHED THEN
        INSERT (
          unique_row_id,
          filename,
          Timestamp,
          Type_of_mobile,
          MMSI,
          Latitude,
          Longitude,
          Navigational_status,
          ROT,
          SOG,
          COG,
          Heading,
          IMO,
          Callsign,
          Name,
          Ship_type,
          Cargo_type,
          Width,
          Length,
          Type_of_position_fixing_device,
          Draught,
          Destination,
          ETA,
          Data_source_type,
          Size_A,
          Size_B,
          Size_C,
          Size_D
        )
        VALUES (
          S.unique_row_id,
          S.filename,
          S.Timestamp,
          S.Type_of_mobile,
          S.MMSI,
          S.Latitude,
          S.Longitude,
          S.Navigational_status,
          S.ROT,
          S.SOG,
          S.COG,
          S.Heading,
          S.IMO,
          S.Callsign,
          S.Name,
          S.Ship_type,
          S.Cargo_type,
          S.Width,
          S.Length,
          S.Type_of_position_fixing_device,
          S.Draught,
          S.Destination,
          S.ETA,
          S.Data_source_type,
          S.Size_A,
          S.Size_B,
          S.Size_C,
          S.Size_D
        );

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: To avoid cluttering your storage, we will remove the downloaded files

pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('GCP_CREDS')}}"
      projectId: "{{kv('GCP_PROJECT_ID')}}"
      location: "{{kv('GCP_LOCATION')}}"
      bucket: "{{kv('GCP_BUCKET_NAME')}}"

triggers:
  - id: schedule
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 9 * * *"